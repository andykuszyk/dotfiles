* General Emacs packages and customisations
** Magit
*** Magit
#+begin_src elisp
(use-package magit :ensure t)
(setq magit-diff-refine-hunk (quote all)) ; Use word diffs when showing diffs
#+end_src
*** Forge
#+begin_src elisp :results none
(use-package forge :ensure t :after magit)
(setq auth-sources '("~/.authinfo.gpg"))
;; Open forge edit buffers in the same window
(add-to-list 'display-buffer-alist '("[0-9]+;*[0-9]+" display-buffer-same-window))
#+end_src
** Autocommit changes to files
#+begin_src elisp :results none
(use-package git-auto-commit-mode :ensure t)
(setq-default gac-automatically-add-new-files-p t)
(setq-default gac-automatically-push-p t)
#+end_src
In order for files to be autocommitted, the following ~.dir-locals.el~ file is required in their directory:
#+begin_example
((nil . ((eval git-auto-commit-mode 1))))
#+end_example
** Flyspell in text mode
#+begin_src elisp :results none
(defun ak/text-mode-hook ()
  (flyspell-mode))
(add-hook 'text-mode-hook #'ak/text-mode-hook)
#+end_src
** Emoji support
*** Package for inserting emojis
Allows emojis to easily be inserted from a completion menu.
#+begin_src elisp :results none
(use-package emojify :ensure t)
(setq emojify-display-style 'unicode)
(setq emojify-emoji-styles '(unicode))
(global-set-key (kbd "C-c i") #'emojify-insert-emoji)
#+end_src
*** Emoji-enabled font
#+begin_src elisp :results none
(when (member "Noto Color Emoji" (font-family-list))
  (set-fontset-font
    t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
#+end_src
** Enable disabled commands
#+begin_src elisp
(put 'narrow-to-region 'disabled nil)
#+end_src
** Display buffer customisation
#+begin_src elisp :results none
(add-to-list 'display-buffer-alist '("jira" display-buffer-same-window))
(add-to-list 'display-buffer-alist '("\\*gh\\*" display-buffer-same-window))
(add-to-list 'display-buffer-alist '(".*onfluence.*" display-buffer-same-window))
#+end_src
** Package and function for inserting uuids
#+begin_src elisp :results none
(use-package uuid :ensure t)
(defun ak/insert-uuid ()
  (interactive)
  (insert (uuid-string)))
#+end_src
** Support for editing gpg encrypted files
#+begin_src elisp :results none
(setq epg-pinentry-mode 'loopback) ; allow passphrase to be entered in minibuffer
(setq epa-file-select-keys nil) ; disable message to select encryption key
#+end_src
** Prompt before closing with =C-x C-c=
#+begin_src elisp :results none
(defun ak/quit ()
  (interactive)
  (if (yes-or-no-p "Are you sure you want to quit? ")
      (save-buffers-kill-emacs)))

(global-set-key (kbd "C-x C-c") 'ak/quit)
#+end_src
** Unbind frame suspension keys
I occasionally hit ~C-z~ by accident, and find it annoying that the frame is suspended or minimised in some fashion. I prefer to unbind suspension keys:
#+begin_src elisp :results none
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
#+end_src
** Enable recursive minibuffers
This allows the minibuffer to be used when entering text in the minibuffer.
#+begin_src elisp :results none
(setq enable-recursive-minibuffers t)
#+end_src
** GPG pinentry
To use Emacs as a GPG pinentry client, I need to:
*** Install the pinentry libary
#+begin_src bash :results output verbatim :tangle no
brew install pinentry
#+end_src
*** Install the pinentry pack
#+begin_src elisp :results none
(use-package pinentry :ensure t)
#+end_src
*** Start the emacs server
#+begin_src elisp :results none
(pinentry-start)
#+end_src
*** And don't forget to configure gpg to use Emacs
#+begin_src bash :results output verbatim :tangle no
echo "allow-emacs-pinentry" >> ~/.gnupg/gpg-agent.conf 
#+end_src
** Keybindings for profiling
#+begin_src elisp :results none
(global-set-key (kbd "C-x A P s") #'profiler-start)
(global-set-key (kbd "C-x A P S") #'profiler-stop)
(global-set-key (kbd "C-x A P r") #'profiler-report)
#+end_src
