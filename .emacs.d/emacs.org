* Things to learn about
** TODO kill ring, copy and paste history (vim registers)
** TODO [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Dotted-Pair-Notation.html][dotted pair notation]]
** TODO what is a rectangle?
** TODO clojure for the brave and true
** DONE paredit mode
* Things to configure
** DONE try dap-mode for Go debugging
** TODO split buffer and open scratch (e.g. for e-mail or slack message composition)
** DONE go test log file syntax highlighting (see [[https://github.com/doublep/logview][logview]] package)
** TODO make super-f behave like c-x v
** DONE magit forge for issues, pr reviews, and gh notifications
** TODO re-work keybindings to have more consistent and ergonomic interface
** TODO auto-push function isn't working for the latest commit on linux machine
** TODO page up/down don't work in normal mode in vterm
** TODO command to open email and calendar, and rename buffer
** TODO show the result of ~status~ in the modeline
** TODO try [[https://github.com/jcinnamond/el-presenti][john's presentation mode]]
** TODO disable line numbers in image mode
** DONE exwm on mac using x11 forwarding for firefox
** DONE rebind right alt to ctrl on macbook
** TODO exwm suspend
* Compilation
** To configure with xwidgets
#+begin_src bash
./configure --with-xwidgets --with-json
#+end_src
** To configure with x11 support on mac os
#+begin_src bash
./configure --prefix='/opt/emacs-x11' --without-ns --with-x --with-x-toolkit='lucid' --with-xft="$WITH_XFT" --without-makeinfo --with-gif='no' --enable-symbols PKG_CONFIG_PATH='/opt/X11/lib/pkgconfig/' --with-jpeg=ifavailable --with-tiff=ifavailable --with-native-compilation
#+end_src
** To build and install
#+begin_src bash
make
make check
sudo make install
#+end_src
* Config
** GUI customisation
#+begin_src elisp
;; Disable GUI menu bars
(menu-bar-mode -1)
(tool-bar-mode -1)

;; Hide scroll bars
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
(add-to-list 'default-frame-alist '(horizontal-scroll-bars . nil))

;; Disable splash screen and startup message
(setq inhibit-startup-message t) 
(setq initial-scratch-message nil)
#+end_src
** Display time configuration
#+begin_src elisp
;; Show the time in the modeline
(setq display-time-24hr-format t)
(setq display-time-default-load-average nil)
(setq display-time-day-and-date t)
(display-time-mode)
#+end_src
** Backup file configuration
#+begin_src elisp
;; Save backup files in /tmp
(setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src
** Server mode
#+begin_src elisp
;; Always start emacs in server mode
(server-start)
#+end_src
** Package manager configuration
#+begin_src elisp
;; Install MELPA package repository
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Install use-package
(eval-when-compile
  (require 'use-package))
#+end_src
** Inherit environment from shell
#+begin_src elisp
;; Inherit environment from default shell
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs (list "GOROOT" "GOPATH")))
#+end_src
** Mute control bound to f12
#+begin_src elisp
;; Bind mute toggle to f12
(defun toggle-mute ()
  (interactive)
  (start-process "mute" nil "mute")
  (force-mode-line-update t))
(global-set-key [f12] #'toggle-mute)
#+end_src
** Command for launching firefox
#+begin_src elisp
;; Functions for launching X11 applications
(defun firefox ()
  (interactive)
  (start-process-shell-command "firefox" nil "firefox"))
#+end_src
** Ivy
#+begin_src elisp
;; Ivy
(use-package counsel :ensure t)
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x b") 'persp-ivy-switch-buffer)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
#+end_src
** Avy
#+begin_src elisp
(use-package avy :ensure t)
(global-set-key (kbd "C-a") #'avy-goto-char-timer)
#+end_src
** Experimental functions for launching and arranging x windows
#+begin_src elisp
;; Extension functions for exwm
(defun exwm-ext-close-all-windows ()
  "Closes all open windows in the frame, leaving just one open."
  (while (> (count-windows) 1)
    (evil-window-delete)))

(defun exwm-ext-open-in-splits (names)
  "Closes all open windows in the frame, and replaces them with them
  X11 programs provided, tiled horizontally.
  e.g. (exwm-ext-open-in-splits '(\"firefox\" \"gnome-terminal\"))
  will replace the current frame with two windows tiled one above the other,
  with firefox at the top and gnome-terminal at the bottom."
  (exwm-ext-close-all-windows)
  (let ((i (length names)))
    (while (> i 1)
      (evil-window-split)
      (sleep-for 1)
      (setq i (1- i))))
  (message "split complete")
  (sleep-for 5)
  (let (name) 
    (dolist (name names)
      (message name)
      (sleep-for 1)
      (start-process-shell-command name nil name)
      (sleep-for 1)
      (other-window 1))))
#+end_src
** EXWM
*** Initialisation
#+begin_src elisp
(use-package exwm :ensure t)
(setq exwm-workspace-number 4) ; set 4 as the default number of workspaces
;; Ensure exwm buffers have sensible names
(add-hook 'exwm-update-class-hook
          (lambda ()
            (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-class-name))))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (when (or (not exwm-instance-name)
                      (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                      (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-title))))
#+end_src
*** Keybindings
#+begin_src elisp
(setq exwm-input-global-keys
      `(
	([?\s-r] . exwm-reset) ; exit char/fullscreen mode
	;; Bind "s-0" to "s-9" to switch to a workspace by its index.
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))
	([?\s-d] . (lambda (command)
		     (interactive (list (read-shell-command "$ ")))
		     (start-process-shell-command command nil command)))
	([?\s-w ?w] . evil-window-next)
	([?\s-w ?\s-w] . evil-window-next)
	([?\s-w ?h] . evil-window-left)
	([?\s-w ?l] . evil-window-right)
	([?\s-w ?j] . evil-window-down)
	([?\s-w ?k] . evil-window-up)
	([?\s-w ?H] . evil-window-move-far-left)
	([?\s-w ?L] . evil-window-move-far-right)
	([?\s-w ?J] . evil-window-move-very-bottom)
	([?\s-w ?K] . evil-window-move-very-top)
	([?\s-w ?c] . evil-window-delete)
	([?\s-\;] . counsel-M-x)
	([?\s-w ?s] . evil-window-split)
	([?\s-w ?v] . evil-window-vsplit)
	([?\s-a] . winum-select-window-by-number)
	([?\s-f] . firefox)
	([?\s-r] . rename-buffer)
	([?\s-l] . exwm-input-toggle-keyboard)
	([f12] . toggle-mute)
	))
#+end_src
*** Multi-monitor support
#+begin_src elisp
(require 'exwm-randr)
;; Fedora laptop
(when (string-equal (system-name) "localhost-live")
    (setq exwm-randr-workspace-output-plist '(0 "HDMI-1" 1 "eDP-1"))
    (add-hook 'exwm-randr-screen-change-hook
	(lambda ()
	(start-process-shell-command "xrandr" nil "xrandr --output eDP-1 --mode 1366x768 --pos 277x1080 --rotate normal --output VGA-1 --off --output HDMI-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output DP-1 --off --output HDMI-2 --off --output DP-2 --off"))))
;; Work computer
(unless (string-equal (system-name) "localhost-live")
    (setq exwm-randr-workspace-output-plist '(0 "DP-1" 1 "DP-5" 2 "DP-7"))
    (add-hook 'exwm-randr-screen-change-hook
	(lambda ()
	(start-process-shell-command "xrandr" nil "xrandr --output DP-0 --off --output DP-1 --mode 1920x1080 --pos 0x0 --rotate right --output DP-2 --off --output DP-3 --off --output DP-4 --off --output DP-5 --mode 1920x1080 --pos 1080x221 --rotate normal --output DP-6 --off --output DP-7 --mode 1920x1080 --pos 3000x0 --rotate left"))))
(exwm-randr-enable)
#+end_src
*** Allow buffers to be shared between all exwm workspaces
I use Perspective for managing workspaces.
#+begin_src elisp
(setq exwm-workspace-show-all-buffers t) ; show all buffers on each workspace
(setq exwm-layout-show-all-buffers t) ; allow swetching to buffers from another workspace
#+end_src
*** Modifier key remapping
#+begin_src elisp
(defun remap-modifier-keys-for-exwm ()
  (interactive)
  (shell-command "xmodmap -e \"clear Mod5\"")
  (shell-command "xmodmap -e \"keycode 108 = Super_R\"")
  (shell-command "xmodmap -e \"keycode 92 = Super_R\""))
(add-hook 'exwm-init-hook #'remap-modifier-keys-for-exwm)
#+end_src
*** Start exwm
#+begin_src elisp
(exwm-enable)
#+end_src
** Command for setting text width
#+begin_src elisp
;; Function for configuring text-width
(defun set-text-width()
  (interactive)
  (auto-fill-mode)
  (set-fill-column 80))
#+end_src
** Spacemacs theme
#+begin_src elisp
;; Spacemacs theme
(use-package spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-dark t))
#+end_src
** Spaceline modeline
#+begin_src elisp
;; Spaceline status bar
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme))
;; Define custom segments
(setq mute-segment (make-symbol "mute-segment"))
(spaceline-define-segment mute-segment
  "Displays the current mute status of the system"
  (if (eq (length (shell-command-to-string "pacmd list-sources | grep muted | grep yes")) 0)
      "ðŸ”ˆ"
    "ðŸ”‡"))
(setq status-segment (make-symbol "status-segment"))
(spaceline-define-segment status-segment
  "Displays the current system status"
  (shell-command-to-string "status"))
;; Configure spaceline
(spaceline-toggle-window-number-off)                                      ; otherwise the evil state indicator isn't shown
(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state) ; colorise the modeline based on the evil state
(setq powerline-default-separator "arrow")
(setq spaceline-separator-dir-left '(left . left))
(setq spaceline-separator-dir-right '(right . right))
(setq spaceline-right-segment '(
    mute-segment
    (battery)
    (global)
    (buffer-position)))
(when (string= system-type "darwin")
    (setq spaceline-right-segment '( ; do not include the mute-segment on mac os, because it is very slow
	(battery)
	(global)
	(buffer-position)
    )))
(spaceline-compile
  ; left side
  '(
    window-number
    (evil-state :face highlight-face :priority 100)
    ((buffer-modified buffer-id) :priority 98)
    (major-mode :priority 79)
    (process :when active)
    (version-control :when active)
    ((flycheck-error flycheck-warning flycheck-info) :when active :priority 89)
   )
  ; right side
  spaceline-right-segment
  )
#+end_src
** Use relative line numbers
#+begin_src elisp
;; Use relative line numbers
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
#+end_src
** Line highlighting
#+begin_src elisp
;; Highlight current line
(global-hl-line-mode)
#+end_src
** Hash mapping for mac
#+begin_src elisp
;; Re-map alt-3 to hash on mac keyboard
(define-key key-translation-map (kbd "M-3") (kbd "#"))
#+end_src
** Evil mode
#+begin_src elisp
;; Evil mode vim emulation
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (customize-save-variable 'evil-undo-system #'undo-redo)
  :config
  (evil-mode 1))
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

;; Additional vim-style keybindings for window management
(define-key evil-normal-state-map (kbd "C-w <left>") 'windmove-left)
(define-key evil-normal-state-map (kbd "C-w <right>") 'windmove-right)
(define-key evil-normal-state-map (kbd "C-w <up>") 'windmove-u)
(define-key evil-normal-state-map (kbd "C-w <down>") 'windmove-down)
#+end_src
** Battery indicator
#+begin_src elisp
;; Fancy battery indicator
(use-package fancy-battery :ensure t)
(add-hook 'after-init-hook #'fancy-battery-mode)
(setq fancy-battery-show-percentage t)
#+end_src
** Vterm terminal emulator
#+begin_src elisp
;; vterm terminal emulator
(use-package vterm :ensure t)
(use-package multi-vterm :ensure t)
(defun vterm-hook()
  (display-line-numbers-mode -1)
  (hl-line-mode -1))
(add-hook 'vterm-mode-hook #'vterm-hook)
(add-hook 'multi-vterm-mode-hook #'vterm-hook)
(global-set-key (kbd "C-x v") #'vterm)
(global-set-key (kbd "C-x m") #'multi-vterm)
#+end_src
** Treemacs
#+begin_src elisp
;; Treemacs file browser
(use-package treemacs :ensure t)
(use-package treemacs-evil :ensure t)
(use-package treemacs-projectile :ensure t)
(global-set-key [f8] #'treemacs)
(defun treemacs-hook ()
    (display-line-numbers-mode -1))
(add-hook 'treemacs-mode-hook 'treemacs-hook)
#+end_src
*** Keybindings
#+begin_src elisp
(global-set-key (kbd "C-x t o") #'treemacs-add-and-display-current-project-exclusively)
(global-set-key (kbd "C-x t c") #'treemacs)
#+end_src
** Projectile
#+begin_src elisp
;; Projectile
(use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src
** Magit
#+begin_src elisp
;; Magit
(use-package magit :ensure t)
(setq magit-diff-refine-hunk (quote all)) ; Use word diffs when showing diffs
#+end_src
** Auto completion with company mode
#+begin_src elisp
;; Auto-completion
(use-package company :ensure t)
(add-hook 'after-init-hook #'global-company-mode) ; Enable company mode in all buffers
#+end_src
** Function for synchronising note files with git
#+begin_src elisp
;; Function for synchronising notes files with git
(defun sync-notes()
  (when (string-match-p (regexp-quote "notes") buffer-file-name)
    (magit-stage-file buffer-file-name)
    (magit-commit-create (list "-m" "auto-commit from emacs"))
    (magit-fetch-all ())
    (magit-rebase-branch "origin/master" ())
    (magit-push-current-to-upstream ())))

;; Auto commit/push files after saving for notes repos.
(add-hook 'after-save-hook #'sync-notes)
#+end_src
** Org mode customisation
*** Org config and key bindings
#+begin_src elisp
;; Org mode customisation
(setq org-startup-folded t) ; open org files folded, rather than expanded
(setq org-edit-src-content-indentation 0) ; do not indent code in source blocks
(setq org-startup-with-inline-images t) ; always show inline images
(setq org-adapt-indentation nil) ; do not indent headline contents with headline
(define-key org-mode-map (kbd "C-c C-s") #'org-insert-structure-template)
#+end_src
*** Org babel config
#+begin_src elisp
;; Org babel support for go
(use-package ob-go :ensure t)

;; Mermaid babel support
(use-package mermaid-mode :ensure t) ; load mermaid-mode before ob-mermaid, because ob-mermaid has a better babel function
(use-package ob-mermaid :ensure t)

;; Use python3 for python blocks
(setq org-babel-python-command "python3")

;; Org Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (go . t)
   (mermaid . t)
   (shell . t)
   (emacs-lisp . t)))
#+end_src
*** Export org files as revealjs presentations
#+begin_src elisp
;; Export org files to reveal.js presentations
(use-package ox-reveal :ensure t)
(load-library "ox-reveal")
(use-package htmlize :ensure t) ; required for source block highlighting
#+end_src
*** Function for copying org links
This function was taken from [[https://emacs.stackexchange.com/questions/3981/how-to-copy-links-out-of-org-mode][StackOverflow]].
#+begin_src elisp
(defun farynaio/org-link-copy (&optional arg)
  "Extract URL from org-mode link and add it to kill ring."
  (interactive "P")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
          (type (org-element-property :type link))
          (url (org-element-property :path link))
          (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url))))

(define-key org-mode-map (kbd "C-x C-l") 'farynaio/org-link-copy)
#+end_src

** Function for running make
#+begin_src elisp
;; Convenience make function
;; Alternatively, `M-!, make` can be used.
(defun make ()
  (interactive))
#+end_src
  (start-process "make" nil "make"))
** Perspective workspaces
#+begin_src elisp
;; Perspective
(use-package perspective
  :ensure t
  :custom
  (setq persp-sort 'access)
  (persp-mode-prefix-key (kbd "C-x x"))
  :init
  (persp-mode))

;; Function to add and switch to buffer in perspective
(defun persp-add-and-switch-buffer (buffer-or-name)
  (interactive
   (list
    (let ((read-buffer-function nil))
      (read-buffer "Add buffer to perspective: "))))
  (persp-add-buffer buffer-or-name)
  (switch-to-buffer buffer-or-name))

;; Function to switch to a new perspective, and add the current buffer
(defun persp-switch-and-add-buffer ()
  (interactive)
  (let ((buffer (buffer-name)))
    (persp-switch ())
    (persp-add-and-switch-buffer buffer)))

;; Key bindings for replacement buffer switch, and buffer moving commands
(define-key perspective-map (kbd "a") 'persp-add-and-switch-buffer)
(define-key perspective-map (kbd "S") 'persp-switch-and-add-buffer)
#+end_src
** Window switcher
#+begin_src elisp
;; Numbered window switcher
(use-package winum :ensure t)
(winum-mode)
#+end_src
** Window resizing
#+begin_src elisp
(use-package resize-window :ensure t)
#+end_src
** Experimental calendar viewer
#+begin_src elisp
;; Calendar
(use-package calfw :ensure t)
(use-package calfw-ical :ensure t)
(defun ak/open-pd ()
    (cfw:open-ical-calendar "https://form3.pagerduty.com/private/f0bc0c4f47ebaf99c603bccb7b0b2215233ff70caf7348679ffa0c01e4fd3c6a/feed"))
#+end_src

** Git linking
This let's you copy the URL to the current line in the git forge using ~M-x git-link~.
#+begin_src elisp
(use-package git-link :ensure t)
#+end_src
** Language support
*** Python support
**** Use ~ipython~ as the python shell
#+begin_src elisp
(when (executable-find "ipython")
  (setq python-shell-interpreter "ipython"))
#+end_src
*** LSP mode
#+begin_src elisp
(use-package lsp-mode :ensure t)
(setq lsp-enable-file-watchers nil)
(use-package lsp-ui :ensure t)
(setq lsp-lens-enable nil)
(use-package flycheck :ensure t)
(global-flycheck-mode)
#+end_src
*** DAP mode
#+begin_src elisp
(use-package dap-mode :ensure t)
(add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src
*** Markdown support
#+begin_src elisp
;; Install markdown package
(use-package markdown-mode :ensure t)
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(setq markdown-fontify-code-blocks-natively t)
#+end_src
*** Golang support
**** Go mode
#+begin_src elisp
(use-package go-mode :ensure t)
(defun go-set-tab-width ()
  (setq tab-width 4))
(add-hook 'go-mode-hook #'lsp) ; enter lsp mode when entering go mode
(add-hook 'go-mode-hook #'go-set-tab-width) ; set tab width when opening go files
(setq gofmt-command "goimports") ; format files with goimports
(add-hook 'before-save-hook #'gofmt-before-save) ; format files on save
#+end_src
**** Custom build flags
If you change this variable, run ~M-x lsp-workspace-restart~ to restart ~gopls~.

#+begin_src elisp
(setq lsp-go-env '((GOFLAGS . "-tags=associations")))
#+end_src

This will enable the language server to recognise files with build flags, although this won't help debugging.

Delve supports Go build flags, but not via DAP. This means that debugging a file with build flags will fail.

To work around this problem, temporarily remove the build flags.
**** Go test support
#+begin_src elisp
(use-package gotest :ensure t)
(setq go-test-verbose t)
#+end_src

To run a test that the cursor is in, use ~M-x go-test-current-test~.

If the file has a build flag on it, first set a buffer-local variable with the build flag.

For example, for the build flag ~foo~, run ~(setq go-test-args "-tags='foo'")~.
**** Go debugging
This relies on ~dap-mode~ and ~lsp-mode~.
#+begin_src elisp
(require 'dap-dlv-go)
#+end_src
Files with build flags will fail. At the moment, the only way I know of to solve this is to temporarily remove the build flags.
**** TL;DR
- ~M-x go-test-current-test~ to run a test.
- ~M-x dap-debug~ to start a debugging sesssion.
*** Terraform support
#+begin_src elisp
;; Terraform support
(use-package terraform-mode :ensure t)
(add-hook 'terraform-mode-hook #'lsp)
(add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
#+end_src
*** Yaml support
#+begin_src elisp
;; YAML support
(use-package yaml-mode :ensure t)
#+end_src
*** Clojure support
#+begin_src elisp
;; Clojure support
(use-package paredit :ensure t)
(use-package clojure-mode :ensure t)
(add-hook 'clojure-mode-hook #'lsp)
(add-hook 'clojure-mode-hook #'paredit-mode)
(use-package cider :ensure t)
#+end_src
*** Elisp customisations
#+begin_src elisp
(add-hook 'emacs-lisp-mode-hook #'paredit-mode)
#+end_src
*** JSON support
#+begin_src elisp
;; Better JSON support
(use-package json-mode :ensure t)
#+end_src
*** Dockerfile support
#+begin_src elisp
;; Dockerfile mode
(use-package dockerfile-mode :ensure t)
(add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-mode))
#+end_src

*** Bazel/starlark/tiltfile support
#+begin_src elisp
(use-package bazel :ensure t)
(add-to-list 'auto-mode-alist '("Tiltfile.*" . bazel-starlark-mode))

(add-to-list 'lsp-language-id-configuration '(bazel-starlark-mode . "starlark"))
(lsp-register-client
 (make-lsp-client :new-connection (lsp-stdio-connection '("tilt" "lsp" "start"))
		  :activation-fn (lsp-activate-on "starlark")
		  :server-id 'tilt))
#+end_src
*** Helm/tpl syntax higlighting
#+begin_src elisp
(use-package k8s-mode :ensure t)
(add-to-list 'auto-mode-alist '("\\.tpl\\'" . k8s-mode))
#+end_src
** EAF
#+begin_src elisp
(when (file-directory-p "~/.emacs.d/site-lisp/emacs-application-framework/")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
  (require 'eaf)
  (require 'eaf-markdown-previewer))
#+end_src
** Which key
#+begin_src elisp
(use-package which-key :ensure t)
(which-key-mode)
#+end_src

** Horizontal margin padding for reading on wide screens
These functions
#+begin_src elisp
(defun ak/reading-margin ()
  (/ (window-width) 3))

(defmacro ak/reading-func (name left right)
  (list 'defun (intern (format "ak/%s-reading" name)) ()
    (list 'interactive)
    (list 'visual-line-mode)
    (list 'set-window-margins nil (if left '(ak/reading-margin) 0) (if right '(ak/reading-margin) 0))))

(ak/reading-func center t t)
(ak/reading-func "left" t nil)
(ak/reading-func "right" nil t)
(ak/reading-func "reset" nil nil)
#+end_src
** Vertical margin padding for reading on tall screens
#+begin_src elisp
(use-package topspace :ensure t)
#+end_src
