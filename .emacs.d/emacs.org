* Compilation
** To configure with xwidgets
#+begin_src bash
./configure --with-xwidgets --with-json
#+end_src
** To configure with x11 support on mac os
#+begin_src bash
./configure --prefix='/opt/emacs-x11' --without-ns --with-x --with-x-toolkit='lucid' --with-xft="$WITH_XFT" --without-makeinfo --with-gif='no' --enable-symbols PKG_CONFIG_PATH='/opt/X11/lib/pkgconfig/' --with-jpeg=ifavailable --with-tiff=ifavailable --with-native-compilation
#+end_src
** To build and install
#+begin_src bash
make
make check
sudo make install
#+end_src
* Config
** GUI customisation
#+begin_src elisp
;; Disable GUI menu bars
(menu-bar-mode -1)
(tool-bar-mode -1)

;; Hide scroll bars
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
(add-to-list 'default-frame-alist '(horizontal-scroll-bars . nil))

;; Disable splash screen and startup message
(setq inhibit-startup-message t) 
(setq initial-scratch-message nil)
#+end_src
** Display time configuration
#+begin_src elisp
;; Show the time in the modeline
(setq display-time-24hr-format t)
(setq display-time-default-load-average nil)
(setq display-time-day-and-date t)
(display-time-mode)
#+end_src
** Backup file configuration
#+begin_src elisp
;; Save backup files in /tmp
(setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src
** Server mode
#+begin_src elisp
;; Always start emacs in server mode
(server-start)
#+end_src
** Package manager configuration
#+begin_src elisp
;; Install MELPA package repository
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Install use-package
(eval-when-compile
  (require 'use-package))
#+end_src
** Inherit environment from shell
#+begin_src elisp
;; Inherit environment from default shell
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs (list "GOROOT" "GOPATH")))
#+end_src
** Ivy
I install Ivy, because I like the buffer switcher and the file finder. The buffer switcher is compatible with Perspective, and the file finder is nice. I install the ~counsel~ package, but don't enable ~ivy-mode~.
#+begin_src elisp
;; Ivy
(use-package counsel :ensure t)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(global-set-key (kbd "C-x b") 'persp-ivy-switch-buffer)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
#+end_src
** Vertico and friends
I use Vertico, and its related packages, for most completion. Ivy is used just for buffer switching, and opening files.
*** Vertico
Vertico provides vertical narrowing and completion, but is pretty basic compared to Ivy.
#+begin_src elisp
(use-package vertico :ensure t :init (vertico-mode))
(global-set-key (kbd "M-x") 'execute-extended-command) ; not really necessary, but included to explicitly unset any other keybindings.
#+end_src
*** Marginalia
Marginalia adds useful metadata to items in Vertico's completion results, e.g. descriptions of commands in ~M-x~.k
#+begin_src elisp
(use-package marginalia :ensure t :init (marginalia-mode))
#+end_src
*** Consult
Consult offers a wide range of searching commands. I just use it as a replacement for swiper, because it feels faster.
#+begin_src elisp :results none
(use-package consult :ensure t)
(global-set-key (kbd "C-s") 'consult-line)
#+end_src
*** Orderless
Orderless provides a completion style for Vertico that allows matches to be narrowed using space separated terms, much like Ivy does out of the box
#+begin_src elisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
However, I disable orderless for Company, because I find it affects performance whilst editing buffers. The function below is taken from [[https://github.com/oantolin/orderless#company][here]].
#+begin_src elisp
;; We follow a suggestion by company maintainer u/hvis:
;; https://www.reddit.com/r/emacs/comments/nichkl/comment/gz1jr3s/
(defun company-completion-styles (capf-fn &rest args)
  (let ((completion-styles '(basic partial-completion)))
    (apply capf-fn args)))
(advice-add 'company-capf :around #'company-completion-styles)
#+end_src
** Avy
#+begin_src elisp :results none
(use-package avy :ensure t)
(global-set-key (kbd "M-a") #'avy-goto-char-timer)
(global-set-key (kbd "M-g g") #'avy-goto-line)
#+end_src
** Spacemacs theme
#+begin_src elisp :results none
;; Spacemacs theme
(use-package spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-dark t))
#+end_src
** Spaceline modeline
*** Install spaceline
#+begin_src elisp :results none
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme))
#+end_src
*** Perspective segment
#+begin_src elisp :results none
(setq perspective-segment (make-symbol "perspective-segment"))
(spaceline-define-segment perspective-segment
  "Displays the current perspective"
  (persp-current-name))
#+end_src
*** Time segments
#+begin_src elisp :results none
(setq time-segment (make-symbol "time-segment"))
(spaceline-define-segment time-segment
  "Displays the current time"
  (format-time-string "%a %b %e %H:%M"))
(setq utc-segment (make-symbol "utc-segment"))
(spaceline-define-segment utc-segment
  "Displays the current utc"
  (format-time-string "%H:%M UTC" nil t))
#+end_src
*** Configure modeline
#+begin_src elisp :results none
(spaceline-toggle-window-number-off)                                      ; otherwise the evil state indicator isn't shown
(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state) ; colorise the modeline based on the evil state
(setq powerline-default-separator "arrow")
(setq spaceline-separator-dir-left '(left . left))
(setq spaceline-separator-dir-right '(right . right))

(spaceline-compile
  ; left side
  '(
    window-number
    (evil-state :face highlight-face :priority 100)
    ((buffer-modified buffer-id) :priority 98)
    (major-mode :priority 79)
    (process :when active)
    (version-control :when active)
    ((flycheck-error flycheck-warning flycheck-info) :when active :priority 89)
   )
  ; right side
  '(
    (battery)
    (time-segment)
    (utc-segment)
    (perspective-segment)
    (buffer-position)
   )
  )
#+end_src
** Display line numbers
#+begin_src elisp :results none
(setq display-line-numbers-type t)
(global-display-line-numbers-mode)
#+end_src
** Line highlighting
#+begin_src elisp
;; Highlight current line
(global-hl-line-mode)
#+end_src
** Hash mapping for mac
#+begin_src elisp
;; Re-map alt-3 to hash on mac keyboard
(define-key key-translation-map (kbd "M-3") (kbd "#"))
#+end_src
** Battery indicator
#+begin_src elisp
;; Fancy battery indicator
(use-package fancy-battery :ensure t)
(add-hook 'after-init-hook #'fancy-battery-mode)
(setq fancy-battery-show-percentage t)
#+end_src
** Vterm terminal emulator
#+begin_src elisp
;; vterm terminal emulator
(use-package vterm :ensure t)
(use-package multi-vterm :ensure t)
(defun vterm-hook()
  (display-line-numbers-mode -1)
  (hl-line-mode -1))
(add-hook 'vterm-mode-hook #'vterm-hook)
(add-hook 'multi-vterm-mode-hook #'vterm-hook)
(global-set-key (kbd "C-x v") #'vterm)
(global-set-key (kbd "C-x m") #'multi-vterm)
#+end_src
** Projectile
*** Install and configure projectile
#+begin_src elisp
;; Projectile
(use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src
*** Create and open PRs using ~gh~ CLI and projectile
#+begin_src elisp
(defun ak/gh-create-pr ()
  (interactive)
  (projectile-run-shell-command-in-root "gh pr create --web"))
(defun ak/gh-view-pr ()
  (interactive)
  (projectile-run-shell-command-in-root "gh pr view --web"))
(define-key projectile-mode-map (kbd "C-c p G c") #'ak/gh-create-pr)
(define-key projectile-mode-map (kbd "C-c p G v") #'ak/gh-view-pr)
#+end_src
** Magit
*** Magit
#+begin_src elisp
(use-package magit :ensure t)
(setq magit-diff-refine-hunk (quote all)) ; Use word diffs when showing diffs
#+end_src
*** Forge
#+begin_src elisp :results none
(use-package forge :ensure t :after magit)
(setq auth-sources '("~/.authinfo.gpg"))
;; Open forge edit buffers in the same window
(add-to-list 'display-buffer-alist '("[0-9]+;*[0-9]+" display-buffer-same-window))
#+end_src
** Auto completion with company mode
#+begin_src elisp
;; Auto-completion
(use-package company :ensure t)
(add-hook 'after-init-hook #'global-company-mode) ; Enable company mode in all buffers
#+end_src
** Autocommit changes to files
#+begin_src elisp :results none
(use-package git-auto-commit-mode :ensure t)
(setq-default gac-automatically-add-new-files-p t)
(setq-default gac-automatically-push-p t)
#+end_src
In order for files to be autocommitted, the following ~.dir-locals.el~ file is required in their directory:
#+begin_example
((nil . ((eval git-auto-commit-mode 1))))
#+end_example
** Flyspell in text mode
#+begin_src elisp :results none
(defun ak/text-mode-hook ()
  (flyspell-mode))
(add-hook 'text-mode-hook #'ak/text-mode-hook)
#+end_src
** Keybindings to enable/disable flyspell and flycheck modes
#+begin_src elisp :results none
(global-set-key (kbd "C-x A x s") #'flyspell-mode)
(global-set-key (kbd "C-x A x c") #'flycheck-mode)
#+end_src
** Perspective workspaces
#+begin_src elisp
;; Perspective
(use-package perspective
  :ensure t
  :custom
  (setq persp-sort 'access)
  (persp-mode-prefix-key (kbd "C-x x"))
  :init
  (persp-mode))

;; Function to add and switch to buffer in perspective
(defun persp-add-and-switch-buffer (buffer-or-name)
  (interactive
   (list
    (let ((read-buffer-function nil))
      (read-buffer "Add buffer to perspective: "))))
  (persp-add-buffer buffer-or-name)
  (switch-to-buffer buffer-or-name))

;; Function to switch to a new perspective, and add the current buffer
(defun persp-switch-and-add-buffer ()
  (interactive)
  (let ((buffer (buffer-name)))
    (persp-switch ())
    (persp-add-and-switch-buffer buffer)))

;; Key bindings for replacement buffer switch, and buffer moving commands
(define-key perspective-map (kbd "a") 'persp-add-and-switch-buffer)
(define-key perspective-map (kbd "S") 'persp-switch-and-add-buffer)
#+end_src
*** Switch to workspace for a projectile project
#+begin_src elisp
(defun ak/persp-project-switch ()
  (interactive)
  (persp-switch "persp-project-switch")
  (projectile-switch-project)
  (persp-rename (projectile-project-name)))

(define-key perspective-map (kbd "P") #'ak/persp-project-switch)
#+end_src
*** Rename current perspective to current project name
#+begin_src elisp :results none
(defun ak/rename-perspective-to-current-project ()
  (interactive)
  (persp-rename (projectile-project-name)))
(define-key perspective-map (kbd "R") #'ak/rename-perspective-to-current-project)
#+end_src
** Window switcher
#+begin_src elisp
;; Numbered window switcher
(use-package winum :ensure t)
(winum-mode)
#+end_src
** Window management
*** Resizing windows
#+begin_src elisp
(use-package resize-window :ensure t)
(global-set-key (kbd "C-x R r") #'resize-window)
#+end_src
*** Rotating window layouts
#+begin_src elisp
(use-package rotate :ensure t)
(global-set-key (kbd "C-x R l") #'rotate-layout)
#+end_src
*** Renaming buffers
#+begin_src elisp :results none
(global-set-key (kbd "C-x R b") #'rename-buffer)
#+end_src
*** Swap windows
#+begin_src elisp :results none
(global-set-key (kbd "C-x R s") #'ace-swap-window)
#+end_src
** Git linking
This let's you copy the URL to the current line in the git forge using ~M-x git-link~.
#+begin_src elisp :results none
(use-package git-link :ensure t)
(define-key projectile-mode-map (kbd "C-c p G l") #'git-link)
#+end_src
** EAF
#+begin_src elisp :results none
(when (file-directory-p "~/.emacs.d/site-lisp/emacs-application-framework/")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
  (require 'eaf)
  (if (file-directory-p "~/.emacs.d/site-lisp/emacs-application-framework/app/browser/")
      (require 'eaf-browser))
  (if (file-directory-p "~/.emacs.d/site-lisp/emacs-application-framework/app/org-previewer/")
      (require 'eaf-org-previewer))
  (if (file-directory-p "~/.emacs.d/site-lisp/emacs-application-framework/app/markdown-previewer/")
      (require 'eaf-markdown-previewer)))
#+end_src
** Which key
#+begin_src elisp
(use-package which-key :ensure t)
(which-key-mode)
#+end_src
** Horizontal margin padding for reading on wide screens
These functions
#+begin_src elisp :results none
(defun ak/reading-margin ()
  (/ (window-width) 3))

(defmacro ak/reading-func (name left right)
  (list 'defun (intern (format "ak/%s-reading" name)) ()
    (list 'interactive)
    (list 'visual-line-mode)
    (list 'set-window-margins nil (if left '(ak/reading-margin) 0) (if right '(ak/reading-margin) 0))))

(ak/reading-func center t t)
(ak/reading-func "left" t nil)
(ak/reading-func "right" nil t)
(ak/reading-func "reset" nil nil)

(global-set-key (kbd "C-x A c") #'ak/center-reading)
(global-set-key (kbd "C-x A r") #'ak/reset-reading)
#+end_src
** Functions to insert template text
#+begin_src elisp :results none
(defun ak/insert-aws-source-block ()
  (interactive)
  (insert "#+begin_src bash :results output verbatim
aws --profile saml --region eu-west-1
#+end_src"))

(defun ak/insert-bash-source-block ()
  (interactive)
  (insert "#+begin_src bash :results output verbatim

#+end_src"))

(defun ak/insert-elisp-source-block ()
  (interactive)
  (insert "#+begin_src elisp :results none

#+end_src"))

(global-set-key (kbd "C-x A i a") #'ak/insert-aws-source-block)
(global-set-key (kbd "C-x A i b") #'ak/insert-bash-source-block)
(global-set-key (kbd "C-x A i e") #'ak/insert-elisp-source-block)
#+end_src
** Vertical margin padding for reading on tall screens
#+begin_src elisp
(use-package topspace :ensure t)
#+end_src
** Emoji support
*** Package for inserting emojis
Allows emojis to easily be inserted from a completion menu.
#+begin_src elisp :results none
(use-package emojify :ensure t)
(setq emojify-display-style 'unicode)
(setq emojify-emoji-styles '(unicode))
(global-set-key (kbd "C-c i") #'emojify-insert-emoji)
#+end_src
*** Emoji-enabled font
#+begin_src elisp :results none
(when (member "Noto Color Emoji" (font-family-list))
  (set-fontset-font
    t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
#+end_src
** Split and draft function
#+begin_src elisp :results none
(defun ak/split-and-draft-exit ()
  (interactive)
  (mark-whole-buffer)
  (kill-region nil nil t)
  (kill-buffer-and-window))

(defun ak/split-and-draft-enter ()
  (interactive)
  (split-window)
  (other-window 1)
  (set-window-buffer nil (set-buffer (generate-new-buffer "ak/draft")))
  (markdown-mode)
  (local-set-key (kbd "C-c C-c") #'ak/split-and-draft-exit))

(global-set-key (kbd "C-x D") #'ak/split-and-draft-enter)
#+end_src
** Render ansi escape codes in a log file
#+begin_src elisp :results none
(defun ak/display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src
** Man customisation
#+begin_src elisp
(setq Man-notify-method 'pushy)
(defun ak/man-mode-hook ()
  (visual-line-mode)
  (adaptive-wrap-prefix-mode)
  (display-line-numbers-mode -1))
(add-hook 'Man-mode-hook #'ak/man-mode-hook)
#+end_src
** Enable disabled commands
#+begin_src elisp
(put 'narrow-to-region 'disabled nil)
#+end_src
** Info customisation
#+begin_src elisp :results none
(use-package adaptive-wrap :ensure t)
(defun ak/info-mode-hook ()
  (visual-line-mode)
  (adaptive-wrap-prefix-mode)
  (display-line-numbers-mode -1))
(add-hook 'Info-mode-hook #'ak/info-mode-hook)
#+end_src
** Kubernetes
*** Kubernetes overview package
#+begin_src elisp
(use-package kubernetes :ensure t)
#+end_src
*** Function for making it easier to work with json logs
#+begin_src elisp
(defun ak/parse-json-logs ()
  (interactive)
  (json-mode)
  (read-only-mode -1)
  (beginning-of-buffer)
  (search-forward "{")
  (let ((start (- (point) 1)))
    (end-of-buffer)
    (search-backward "}")
    (narrow-to-region start (+ 1 (point))))
  (json-pretty-print-buffer))
#+end_src
** Mu4e
#+begin_src elisp :results none
(when (executable-find "mu")
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (setq
   mu4e-sent-folder   "/Sent"       ;; folder for sent messages
   mu4e-drafts-folder "/Drafts"     ;; unfinished messages
   mu4e-trash-folder  "/Trash"      ;; trashed messages
   mu4e-refile-folder "/Archive")   ;; saved messages
  (setq mu4e-get-mail-command "mbsync -a"))
#+end_src
** PDF tools
#+begin_src elisp :results none
(when (display-graphic-p)
  (use-package pdf-tools :ensure t)
  (pdf-tools-install)
  (defun ak/pdf-view-mode-hook ()
    (display-line-numbers-mode -1)
    (pdf-view-midnight-minor-mode))
  (add-hook 'pdf-view-mode-hook #'ak/pdf-view-mode-hook))
#+end_src
** Display buffer customisation
#+begin_src elisp :results none
(add-to-list 'display-buffer-alist '(".*noman.*" display-buffer-same-window))
(add-to-list 'display-buffer-alist '("jira" display-buffer-same-window))
(add-to-list 'display-buffer-alist '(".*onfluence.*" display-buffer-same-window))
#+end_src
** Custom global keybindings for common commands
#+begin_src elisp :results none
(global-set-key (kbd "C-x E") #'eww)
(global-set-key (kbd "C-x y") #'yank-from-kill-ring)
(global-set-key (kbd "M-j") #'join-line)
(global-set-key (kbd "C-x V") #'visual-line-mode)
#+end_src
** Langtool
#+begin_src elisp :results none
(when (file-exists-p "/opt/homebrew/opt/languagetool/bin/languagetool")
  (setq langtool-bin "/opt/homebrew/opt/languagetool/bin/languagetool")
  (use-package langtool :ensure t))
#+end_src
