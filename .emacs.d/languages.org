* Languages
Configuration for a variety of different programming languages that I work on in Emacs.
** LSP mode
LSP mode provides some great, general purpose support for lots of programming languages.
#+begin_src elisp
(use-package lsp-mode :ensure t)
(setq lsp-enable-file-watchers nil)
(use-package lsp-ui :ensure t)
(setq lsp-lens-enable nil)
(use-package flycheck :ensure t)
(global-flycheck-mode)
#+end_src
** DAP mode
DAP mode provides good debugging support for many languages, and integrates nicely with lsp-mode.
#+begin_src elisp
(use-package dap-mode :ensure t)
(add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src
** Markdown support
Support for Markdown files, which is also loaded in ~*.txt~ files. I also enable a spell-checker in Markdown mode.
#+begin_src elisp
(use-package markdown-mode :ensure t)
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(setq markdown-fontify-code-blocks-natively t)

(defun ak/markdown-mode-hook ()
  (flyspell-mode))
(add-hook 'markdown-mode-hook #'ak/markdown-mode-hook)
#+end_src
** Python support
*** Enable LSP mode for Python, and set the column width by default
#+begin_src elisp :results none
(defun ak/python-mode-hook ()
  (setq fill-column 80)
  (auto-fill-mode)
  (display-fill-column-indicator-mode)
  (lsp))
(add-hook 'python-mode-hook #'ak/python-mode-hook)
#+end_src
*** Elpy
Elpy provides a really powerful development environment for Python.
#+begin_src elisp :results none
(use-package elpy :ensure t :init (elpy-enable))
#+end_src
*** Debugging with dap-mode
Explicitly enable debugging python with dap-mode
#+begin_src elisp :results none
(require 'dap-python)
(setq dap-python-debugger 'debugpy)
#+end_src
*** Use ~ipython~ as the python shell
#+begin_src elisp
(when (executable-find "ipython")
  (setq python-shell-interpreter "ipython"))
#+end_src
*** venv support
#+begin_src elisp :results none
(use-package pyvenv :ensure t)
#+end_src
** Golang support
*** Go mode
#+begin_src elisp
(use-package go-mode :ensure t)
(use-package yasnippet :ensure t) ; required for function argument completion
(defun go-set-tab-width ()
  (setq tab-width 4))
(add-hook 'go-mode-hook #'lsp) ; enter lsp mode when entering go mode
(add-hook 'go-mode-hook #'go-set-tab-width) ; set tab width when opening go files
(add-hook 'go-mode-hook #'yas-minor-mode)
(setq gofmt-command "goimports") ; format files with goimports
(add-hook 'before-save-hook #'gofmt-before-save) ; format files on save
#+end_src
*** Custom build flags
If you change this variable, run ~M-x lsp-workspace-restart~ to restart ~gopls~.

#+begin_src elisp
(setq lsp-go-env '((GOFLAGS . "-tags=associations")))
#+end_src

This will enable the language server to recognise files with build flags, although this won't help debugging.

Delve supports Go build flags, but not via DAP. This means that debugging a file with build flags will fail.

To work around this problem, temporarily remove the build flags.
*** Go test support
#+begin_src elisp :results none
(use-package gotest :ensure t)
(setq go-test-verbose t)
(add-to-list 'display-buffer-alist '(".*godoc.*" display-buffer-same-window))
#+end_src

To run a test that the cursor is in, use ~M-x go-test-current-test~.

If the file has a build flag on it, first set a buffer-local variable with the build flag.

For example, for the build flag ~foo~, run ~(setq go-test-args "-tags='foo'")~.
*** Go debugging
This relies on ~dap-mode~ and ~lsp-mode~.
#+begin_src elisp
(require 'dap-dlv-go)
#+end_src
Files with build flags will fail. At the moment, the only way I know of to solve this is to temporarily remove the build flags.
*** TL;DR
- ~M-x go-test-current-test~ to run a test.
- ~M-x dap-debug~ to start a debugging sesssion.
*** Keymap customisation
#+begin_src elisp :results none
(define-key go-mode-map (kbd "C-c C-t t") #'go-test-current-test)
(define-key go-mode-map (kbd "C-c C-t C-t") #'go-test-current-test)
(define-key go-mode-map (kbd "C-c C-t c") #'go-test-current-test-cache)
(define-key go-mode-map (kbd "C-c C-t f") #'go-test-current-file)
(define-key go-mode-map (kbd "C-c C-t p") #'go-test-current-project)
(define-key go-mode-map (kbd "C-c D") #'godoc)
(define-key go-mode-map (kbd "C-c d") #'godoc-at-point)
#+end_src
** Terraform support
Initialise lsp-mode for Terraform, and format files when they are saved:
#+begin_src elisp :results none
(use-package terraform-mode :ensure t)
(add-hook 'terraform-mode-hook #'lsp)
(add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
#+end_src
** Yaml support
#+begin_src elisp
(use-package yaml-mode :ensure t)
#+end_src
** Clojure support
#+begin_src elisp
(use-package paredit :ensure t)
(use-package clojure-mode :ensure t)
(add-hook 'clojure-mode-hook #'lsp)
(add-hook 'clojure-mode-hook #'paredit-mode)
(use-package cider :ensure t)
#+end_src
** Elisp customisations
#+begin_src elisp :results none
(defun ak/emacs-lisp-hook ()
  (paredit-mode)
  (setq fill-column 80)
  (auto-fill-mode)
  (display-fill-column-indicator-mode))
(add-hook 'emacs-lisp-mode-hook #'ak/emacs-lisp-hook)
#+end_src
** JSON support
#+begin_src elisp
(use-package json-mode :ensure t)
#+end_src
** Dockerfile support
#+begin_src elisp
(use-package dockerfile-mode :ensure t)
(add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-mode))
#+end_src
** Bazel/starlark/tiltfile support
#+begin_src elisp
(use-package bazel :ensure t)
(add-to-list 'auto-mode-alist '("Tiltfile.*" . bazel-starlark-mode))

(add-to-list 'lsp-language-id-configuration '(bazel-starlark-mode . "starlark"))
(lsp-register-client
 (make-lsp-client :new-connection (lsp-stdio-connection '("tilt" "lsp" "start"))
		  :activation-fn (lsp-activate-on "starlark")
		  :server-id 'tilt))
#+end_src
** Helm/tpl syntax higlighting
#+begin_src elisp
(use-package k8s-mode :ensure t)
(add-to-list 'auto-mode-alist '("\\.tpl\\'" . k8s-mode))
#+end_src
** Jenkinsfile support
#+begin_src elisp :results none
(use-package jenkinsfile-mode :ensure t)
#+end_src
** Javascript
#+begin_src elisp :results none
(add-hook 'js-mode-hook #'lsp)
(add-hook 'js-mode-hook
	  (lambda ()
	    (local-set-key (kbd "M-.") #'lsp-find-definition)))
#+end_src
And set indentation to 2 spaces:
#+begin_src elisp :results none
(setq js-indent-level 2)
#+end_src
** Typescript
#+begin_src elisp :results none
(use-package typescript-mode)
(add-hook 'typescript-mode-hook #'lsp)
#+end_src
And set indentation to 2 spaces:
#+begin_src elisp :results none
(setq typescript-indent-level 2)
#+end_src
** Java
#+begin_src elisp :results none
(use-package lsp-java :ensure t)
(add-hook 'java-mode-hook #'lsp)
#+end_src
