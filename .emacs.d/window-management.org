* Window management
I use various packages for managing windows and their layouts in Emacs.
** Window switching
I use ~winum~ to allow easily switching between windows using ~C-x w <n>~ where ~<n>~ is the window number. I display each window's number in its modeline.
#+begin_src elisp
;; Numbered window switcher
(use-package winum :ensure t)
(winum-mode)
#+end_src
** Perspective workspaces
I use ~perspective~ to allow arbitrary workspaces to be created in Emacs, much like virtual desktops can be used in a desktop window manager. I use ~perspective~ extensively to help manage the windows and buffers I use for different tasks, and integrate it with several other packages (such as ~projectile~, and ~ivy~).
*** Install perspective
#+begin_src elisp
(use-package perspective
  :ensure t
  :custom
  (setq persp-sort 'access)
  (persp-mode-prefix-key (kbd "C-x x"))
  :init
  (persp-mode))
#+end_src
*** Adding buffers from another workspace
By default, ~perspective~ maintains a list of buffers contained in each workspace, and only shows this list when switching buffers. This is a nice way to organise buffers, but sometimes it's nice to add a buffer from another workspace:
#+begin_src elisp :results none
(defun ak/persp-add-and-switch-buffer (buffer-or-name)
  (interactive
   (list
    (let ((read-buffer-function nil))
      (read-buffer "Add buffer to perspective: "))))
  (persp-add-buffer buffer-or-name)
  (switch-to-buffer buffer-or-name))
(define-key perspective-map (kbd "a") 'ak/persp-add-and-switch-buffer)
#+end_src
*** Moving buffers to a new workspace
Another thing I like to do is take a buffer from the current workspace, and move it to a new workspace entirely. Perhaps I have the buffer open in a window, and I want to "maximise" it in a new workspace so I can work on it in isolation:
#+begin_src elisp :results none
(defun ak/persp-switch-and-add-buffer ()
  (interactive)
  (let ((buffer (buffer-name)))
    (persp-switch ())
    (ak/persp-add-and-switch-buffer buffer)))
(define-key perspective-map (kbd "S") 'ak/persp-switch-and-add-buffer)
#+end_src
*** Switch to workspace for a projectile project
I often like to open a code project in its own workspace, which is named after the root of the code project:
#+begin_src elisp
(defun ak/persp-project-switch ()
  (interactive)
  (persp-switch "persp-project-switch")
  (projectile-switch-project)
  (persp-rename (projectile-project-name)))
(define-key perspective-map (kbd "P") #'ak/persp-project-switch)
#+end_src
*** Rename current workspace to current project name
Sometimes I'll open a code project in a workspace that has a different name, and I want to rename the workspace to match the code project:
#+begin_src elisp :results none
(defun ak/rename-perspective-to-current-project ()
  (interactive)
  (persp-rename (projectile-project-name)))
(define-key perspective-map (kbd "R") #'ak/rename-perspective-to-current-project)
#+end_src
** Window management
I use various functions and packages to make managing multiple windows easier.
*** Resizing windows
This package makes resizing windows visually easy.
#+begin_src elisp :results none
(use-package resize-window :ensure t)
(global-set-key (kbd "C-x R r") #'resize-window)
#+end_src
*** Rotating window layouts
This package lets you cycle though different layouts, a bit like you can in ~tmux~.
#+begin_src elisp :results none
(use-package rotate :ensure t)
(global-set-key (kbd "C-x R l") #'rotate-layout)
#+end_src
*** Renaming buffers
It's handy to have a keybinding to rename buffers at will.
#+begin_src elisp :results none
(global-set-key (kbd "C-x R b") #'rename-buffer)
#+end_src
*** Swap windows
It's handy to have a keybinding to swap windows (e.g. left/right, or top/bottom).
#+begin_src elisp :results none
(global-set-key (kbd "C-x R s") #'ace-swap-window)
#+end_src
