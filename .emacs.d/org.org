* Org config and key bindings
#+begin_src elisp :results none
(setq org-startup-folded t) ; open org files folded, rather than expanded
(setq org-edit-src-content-indentation 0) ; do not indent code in source blocks
(setq org-startup-with-inline-images t) ; always show inline images
(setq org-adapt-indentation nil) ; do not indent headline contents with headline
(setq org-use-speed-commands t) ; use speed keys in org buffers
(setq org-use-property-inheritance t) ; configure sub-headings to always inherit properties
(define-key org-mode-map (kbd "C-c C-x s") #'org-insert-structure-template)
(define-key org-mode-map (kbd "C-c C-s") #'org-schedule)
(define-key org-mode-map (kbd "C-c o c") #'org-capture)
(define-key org-mode-map (kbd "C-c o s") #'org-store-link)
(require 'org-agenda)
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(define-key org-agenda-mode-map (kbd "C-c o c") #'org-capture)
(define-key org-mode-map (kbd "C-c o a") #'org-agenda)
(setq org-image-actual-width nil) ; allow image widths to be overridden with #+ATTR_ORG: :width 100
(defun ak/org-mode-hook ()
  (toggle-truncate-lines)
  (visual-line-mode)
  (flyspell-mode))
(add-hook 'org-mode-hook #'ak/org-mode-hook)
(setq org-todo-keywords
           '((sequence "TODO" "PROG" "|" "DONE")))
(setq org-icalendar-store-UID t) ; export tp ical with persistent ids
#+end_src
* Sticky org agenda buffers
I often make use of different org agenda buffers, and prefer agenda commands to create new buffers, rather than re-using the existing one:
#+begin_src elisp :results none
(setq org-agenda-sticky t)
#+end_src
* Org-refile configuration
When I refile headings, I prefer to choose from among all the level 1-4 headings in the current buffer:
#+begin_src elisp :results none
(setq org-refile-targets
      '(
	(nil . (:level . 1))
	(nil . (:level . 2))
	(nil . (:level . 3))
	(nil . (:level . 4))
	))
#+end_src
* Key-binding to quickly switch to the org agenda
#+begin_src elisp :results none
(global-set-key
 (kbd "C-x A a")
 (lambda ()
   (interactive)
   (if (get-buffer "*Org Agenda(o)*")
       (switch-to-buffer "*Org Agenda(o)*")
     (org-agenda nil "o"))))
#+end_src
* Key binding to capture from anywhere
#+begin_src elisp :results none
(global-set-key (kbd "C-x A k") #'org-capture)
#+end_src
* Org-download
This package allows for downloaded files to be inserted as links in an org file, which is especially useful for inserting images that have been copied to the clipboard.
#+begin_src elisp :results none
(use-package org-download :ensure t)
(define-key org-mode-map (kbd "C-c o d") #'org-download-clipboard)
#+end_src
** Always store images in a local =./images= directory
#+begin_src elisp :results none
(defun ak/set-org-download-vars ()
  (interactive)
  (setq org-download-image-dir "./images")
  (setq org-download-heading-lvl nil))

(add-hook 'org-mode-hook #'ak/set-org-download-vars)
#+end_src
* Keybindings for org table functionality
#+begin_src elisp :results none
(define-key org-mode-map (kbd "C-c T k") #'org-table-delete-column)
#+end_src
* Function to open tree in a new perspective
#+begin_src elisp :results none
(defun ak/open-org-heading-in-new-persp ()
  (interactive)
  (let ((buffer (buffer-name)))
    (delete-window)
    (persp-switch ())
    (persp-add-and-switch-buffer buffer))
  (clone-indirect-buffer nil t)
  (delete-other-windows)
  (org-narrow-to-subtree))

(define-key org-mode-map (kbd "C-c x p") #'ak/open-org-heading-in-new-persp)
#+end_src
* Completion for navigation
This means that ~C-c C-j~ will use completion in the minibuffer for navigating to a heading.
#+begin_src elisp :results none
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)
#+end_src
* Plantuml mode for plantuml source blocks
#+begin_src elisp :results none
(use-package plantuml-mode :ensure t)
(setq plantuml-indent-level 2)
(setq plantuml-default-exec-mode 'jar)
(setq plantuml-output-type "png")
(setq org-plantuml-jar-path
      (expand-file-name "~/plantuml.jar"))
#+end_src
* Mermaid source blocks
#+begin_src elisp :results none
(use-package mermaid-mode :ensure t) ; load mermaid-mode before ob-mermaid, because ob-mermaid has a better babel function
(use-package ob-mermaid :ensure t)
(require 'ob-mermaid)
(setq ob-mermaid-cli-path (executable-find "mmdc"))
#+end_src
* Org babel config
#+begin_src elisp :results none
(use-package ob-go :ensure t)

;; Use python3 for python blocks
(setq org-babel-python-command "python3")

(require 'ob-js)

;; Org Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (go . t)
   (js . t)
   (mermaid . t)
   (shell . t)
   (plantuml .t)
   (emacs-lisp . t)))
(add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))

(defun ak/org-babel-confirm (lang body)
  (not (or (string= lang "elisp")
	   (string= lang "mermaid")
	   (string= lang "shell")
	   (string= lang "sh")
	   (string= lang "plantuml")
	   (string= lang "python")
	   (string= lang "bash"))))
(setq org-confirm-babel-evaluate #'ak/org-babel-confirm)
#+end_src
* Ox-pandoc
Sometimes, when exporting org files to HTML, I prefer to generate a self-contained HTML file with images embedded as base64 data (rather than relying on external image files). This makes it easier to distribute the HTML file as a standalone file.

In order to achieve this, I export the org file using ~ox-pandoc~, rather than the built-in HTML backend.
#+begin_src elisp :results none
(use-package ox-pandoc :ensure t)
(setq org-pandoc-options-for-html5 '((standalone . t) (self-contained . t)))
(setq org-pandoc-options-for-html4 '((standalone . t) (self-contained . t)))
#+end_src
* Customisation of HTML export
#+begin_src elisp :results none
(setq org-html-postamble nil)
#+end_src
* Export org files as revealjs presentations
#+begin_src elisp
;; Export org files to reveal.js presentations
(use-package ox-reveal :ensure t)
(load-library "ox-reveal")
(use-package htmlize :ensure t) ; required for source block highlighting
#+end_src
* Function for copying org links
This function was taken from [[https://emacs.stackexchange.com/questions/3981/how-to-copy-links-out-of-org-mode][StackOverflow]].
#+begin_src elisp :results none
(defun farynaio/org-link-copy (&optional arg)
  "Extract URL from org-mode link and add it to kill ring."
  (interactive "P")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
          (type (org-element-property :type link))
          (url (org-element-property :path link))
          (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url))))

(define-key org-mode-map (kbd "C-c C-x l") 'farynaio/org-link-copy)
(define-key org-mode-map (kbd "C-c x l") 'farynaio/org-link-copy)
#+end_src
* Enable ox-md in dispatcher
#+begin_src elisp :results none
(require 'ox-md)
#+end_src
* GitHub flavoured markdown exporter for org files
#+begin_src elisp :results none
(use-package ox-gfm :ensure t)
#+end_src
* Org latex export
#+begin_src elisp :results none
(add-to-list 'org-latex-classes
             '("letter"
               "\\documentclass{letter}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src
* Function to watch exported ODTs and convert them to PDFs
#+begin_src elisp :results none
(defun ak/convert-odt-to-pdf ()
  (interactive)
  (let*
      ((libre-office "/Applications/LibreOffice.app/Contents/MacOS/soffice")
       (current-buffer-name (buffer-file-name (current-buffer)))
       (buffer-file-path current-buffer-name)
       (odt-file-path
	(replace-regexp-in-string
	 "\\(^.*\\)\\.org$"
	 "\\1.odt"
	 buffer-file-path))
       (current-buffer-name (buffer-name (current-buffer)))
       (output-buffer-name
	(format
	 "* %s | libreoffice PDF render *"
	 current-buffer-name))
       (output-buffer (get-buffer-create output-buffer-name)))
    (async-shell-command
     (format
      "cd %s && echo -n %s | entr -c %s --headless -env:UserInstallation=file:///tmp/LibreOffice_Conversion_${USER} --convert-to pdf:writer_pdf_Export %s"
      (file-name-directory buffer-file-path)
      odt-file-path
      libre-office
      odt-file-path)
     output-buffer-name)))
#+end_src
* Numeric priorities
#+begin_src elisp :results none
(setq org-priority-highest 0)
(setq org-priority-lowest 9)
(setq org-priority-default 0)
#+end_src
* Google calendar import
I have found importing events from Google calendar using an ICS export file to be quite problematic. As a result, I've written some functions below to import relevant event information (date, time, title) from the web UI by simply copying and pasting the text, and then processing it in an Emacs buffer to convert it into org markup.
** Function to parse copied agenda text into org markup
#+begin_src elisp :results none
(defun ak/gcal-to-org-string-month-to-number (month)
  (cond
   ((string-equal month "Jan") "01")
   ((string-equal month "Feb") "02")
   ((string-equal month "Mar") "03")
   ((string-equal month "Apr") "04")
   ((string-equal month "May") "05")
   ((string-equal month "Jun") "06")
   ((string-equal month "Jul") "07")
   ((string-equal month "Aug") "08")
   ((string-equal month "Sept") "09")
   ((string-equal month "Sep") "09")
   ((string-equal month "Oct") "10")
   ((string-equal month "Nov") "11")
   ((string-equal month "Dec") "12")))

(defun ak/gcal-to-org-clean-from-time (time)
  (if (< (length time) 3)
      (format "%s:00" time)
    time))

(defun ak/gcal-to-org-add-am-pm (from to)
  (if (string-match-p ".*a\\|pm" from)
      from
    (if (string-match "^.*\\(a\\|pm\\)$" to)
	(format "%s%s" from (match-string 1 to))
      from)))

(defun ak/gcal-to-org-format-time (time-string)
  (when (string-match "\\(.*\\) \\â€“ \\(.*\\)" time-string)
    (let* ((to-time (match-string 2 time-string))
	   (from-time
	    (ak/gcal-to-org-add-am-pm
	     (ak/gcal-to-org-clean-from-time (match-string 1 time-string))
	     to-time)))
      (format "%s-%s" from-time to-time))))

(defun ak/gcal-to-org-pad-day (day)
  (if (length= day 1)
      (format "0%s" day)
    day))

(defun ak/gcal-to-org (org-buffer-name)
  (interactive)
  (goto-char 0)
  (let ((org-buffer (get-buffer-create org-buffer-name))
	(current-day nil)
	(current-year (car (cdr (cdr (calendar-current-date)))))
	(current-month nil)
	(current-time nil))
    (with-current-buffer org-buffer
      (org-mode)
      (erase-buffer))
    (while (< (line-number-at-pos) (count-lines (point-min) (point-max)))
      (let* ((current-line
	      (buffer-substring-no-properties
	       (line-beginning-position)
	       (line-end-position))))
	(if (string-match "^[0-9]\\{1,2\\}$" current-line)
	    (setq current-day
		  (ak/gcal-to-org-pad-day
		   (match-string 0 current-line)))
	  (if (string-match "^\\([A-Za-z]\\{3,4\\}\\),.\\{3,4\\}$" current-line)
	      (setq current-month (match-string 1 current-line))
	    (if (string-match "^\\(.*[a\\|p]m\\)$" current-line)
		(setq current-time (match-string 1 current-line))
	      (let ((event-name current-line))
		(when current-time
		  (with-current-buffer org-buffer
		    (insert (format
			     "** %s <%s-%s-%s %s>"
			     event-name
			     current-year
			     (ak/gcal-to-org-string-month-to-number current-month)
			     current-day
			     (ak/gcal-to-org-format-time current-time)))
		    (newline))
		  (setq current-time nil)))))))
      (forward-line))))
#+end_src
** Function open Google calendar, parse the markup, and add the result to the kill ring
#+begin_src elisp :results none
(defun ak/gcal-import ()
  (interactive)
  (let ((raw-buffer (get-buffer-create "*ak/gcal-import-raw*")))
    (switch-to-buffer raw-buffer)
    (browse-url "https://calendar.google.com/calendar/u/0/r/agenda")
    (local-set-key
     (kbd "C-c C-c")
     (lambda ()
       (interactive)
       (let ((org-buffer (get-buffer-create "*ak/gcal-import-org*")))
	 (ak/gcal-to-org org-buffer)
	 (with-current-buffer org-buffer
	   (kill-region (point-min) (point-max)))
	 (kill-buffer org-buffer)
	 (kill-buffer "*ak/gcal-import-raw*")
	 (message "org markup added to the kill ring"))))))

(global-set-key (kbd "C-x A g") #'ak/gcal-import)
#+end_src
** The end result
The end result of these functions is:
- I can execute ~ak/gcal-import~ with ~C-x A g~, and the agenda view of my calendar will be opened in a browser.
- I select all, copy, and paste it back into the Emacs buffer which is waiting for me.
- ~C-c C-c~ converts the text to org markup, adds it to the kill ring, and then closes the buffers.
- Then I just open the destination buffer, and yank the markup under the desired heading.
* Command to update agenda list, even if it isn't currently selected
#+begin_src elisp :results none
(defun ak/refresh-agenda-list ()
  (interactive)
  (with-current-buffer (get-buffer "*Org Agenda(o)*")
    (org-agenda-redo "")))

(global-set-key (kbd "C-x A v") 'ak/refresh-agenda-list)
#+end_src
* Custom agenda
I like to see my weekly agenda alongside a list of current "objective" tasks:
#+begin_src elisp :results none
(setq org-agenda-custom-commands
      '(("o" "Agenda and objectives"
         ((tags-todo "objective" ((org-agenda-sorting-strategy '(priority-down))))
	  (agenda "")
	  (tags-todo "CATEGORY=\"goals\"-future-objective" ((org-agenda-sorting-strategy '(priority-down))))
	  (tags-todo "CATEGORY=\"goals\"+future-objective" ((org-agenda-sorting-strategy '(priority-down))))))))
#+end_src
* Strikethrough done headlines in org agenda
#+begin_src elisp :results none
(custom-set-faces
 '(org-agenda-done ((t (:foreground "#42ae2c" :strike-through t :height 1.0))))
 '(org-done ((t (:inherit bold :foreground "#42ae2c" :strike-through t))))
 '(org-headline-done ((t (:foreground "#2d9574" :strike-through t)))))
#+end_src
