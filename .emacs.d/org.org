* Org config and key bindings
#+begin_src elisp :results none
(setq org-startup-folded t) ; open org files folded, rather than expanded
(setq org-edit-src-content-indentation 0) ; do not indent code in source blocks
(setq org-startup-with-inline-images t) ; always show inline images
(setq org-adapt-indentation nil) ; do not indent headline contents with headline
(setq org-use-speed-commands t) ; use speed keys in org buffers
(define-key org-mode-map (kbd "C-c C-x s") #'org-insert-structure-template)
(define-key org-mode-map (kbd "C-c C-s") #'org-schedule)
(define-key org-mode-map (kbd "C-c o c") #'org-capture)
(define-key org-mode-map (kbd "C-c o s") #'org-store-link)
(require 'org-agenda)
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(define-key org-agenda-mode-map (kbd "C-c o c") #'org-capture)
(define-key org-mode-map (kbd "C-c o a") #'org-agenda)
(setq org-image-actual-width nil) ; allow image widths to be overridden with #+ATTR_ORG: :width 100
(defun ak/org-mode-hook ()
  (toggle-truncate-lines)
  (visual-line-mode)
  (flyspell-mode))
(add-hook 'org-mode-hook #'ak/org-mode-hook)
(setq org-todo-keywords
           '((sequence "TODO" "PROG" "|" "DONE")))
(setq org-icalendar-store-UID t) ; export tp ical with persistent ids
#+end_src
* Org-download
This package allows for downloaded files to be inserted as links in an org file, which is especially useful for inserting images that have been copied to the clipboard.
#+begin_src elisp :results none
(use-package org-download :ensure t)
(define-key org-mode-map (kbd "C-c o d") #'org-download-clipboard)
#+end_src
* Keybindings for org table functionality
#+begin_src elisp :results none
(define-key org-mode-map (kbd "C-c T k") #'org-table-delete-column)
#+end_src
* Function to open tree in a new perspective
#+begin_src elisp :results none
(defun ak/open-org-heading-in-new-persp ()
  (interactive)
  (let ((buffer (buffer-name)))
    (delete-window)
    (persp-switch ())
    (persp-add-and-switch-buffer buffer))
  (clone-indirect-buffer nil t)
  (delete-other-windows)
  (org-narrow-to-subtree))

(define-key org-mode-map (kbd "C-c x p") #'ak/open-org-heading-in-new-persp)
#+end_src
* Completion for navigation
This means that ~C-c C-j~ will use completion in the minibuffer for navigating to a heading.
#+begin_src elisp :results none
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)
#+end_src
* Plantuml mode for plantuml source blocks
#+begin_src elisp :results none
(use-package plantuml-mode :ensure t)
(setq plantuml-indent-level 2)
#+end_src
* Org babel config
#+begin_src elisp :results none
;; Org babel support for go
(use-package ob-go :ensure t)

;; Mermaid babel support
(use-package mermaid-mode :ensure t) ; load mermaid-mode before ob-mermaid, because ob-mermaid has a better babel function
(use-package ob-mermaid :ensure t)

;; Use python3 for python blocks
(setq org-babel-python-command "python3")

(setq org-plantuml-jar-path
      (expand-file-name "~/plantuml.jar"))

;; Org Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (go . t)
   (mermaid . t)
   (shell . t)
   (plantuml .t)
   (emacs-lisp . t)))

(defun ak/org-babel-confirm (lang body)
  (not (or (string= lang "elisp")
	   (string= lang "mermaid")
	   (string= lang "shell")
	   (string= lang "sh")
	   (string= lang "plantuml")
	   (string= lang "python")
	   (string= lang "bash"))))
(setq org-confirm-babel-evaluate #'ak/org-babel-confirm)
#+end_src
* Enable lsp mode for bash source blocks
#+begin_src elisp :results none
(defun org-babel-edit-prep:bash (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))
#+end_src
* Export org files as revealjs presentations
#+begin_src elisp
;; Export org files to reveal.js presentations
(use-package ox-reveal :ensure t)
(load-library "ox-reveal")
(use-package htmlize :ensure t) ; required for source block highlighting
#+end_src
* Function for copying org links
This function was taken from [[https://emacs.stackexchange.com/questions/3981/how-to-copy-links-out-of-org-mode][StackOverflow]].
#+begin_src elisp :results none
(defun farynaio/org-link-copy (&optional arg)
  "Extract URL from org-mode link and add it to kill ring."
  (interactive "P")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
          (type (org-element-property :type link))
          (url (org-element-property :path link))
          (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url))))

(define-key org-mode-map (kbd "C-c C-x l") 'farynaio/org-link-copy)
(define-key org-mode-map (kbd "C-c x l") 'farynaio/org-link-copy)
#+end_src
* Enable ox-md in dispatcher
#+begin_src elisp :results none
(require 'ox-md)
#+end_src
* Org latex export
#+begin_src elisp :results none
(add-to-list 'org-latex-classes
             '("letter"
               "\\documentclass{letter}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src
* Function to watch exported ODTs and convert them to PDFs
#+begin_src elisp :results none
(defun ak/convert-odt-to-pdf ()
  (interactive)
  (let*
      ((libre-office "/Applications/LibreOffice.app/Contents/MacOS/soffice")
       (current-buffer-name (buffer-file-name (current-buffer)))
       (buffer-file-path current-buffer-name)
       (odt-file-path
	(replace-regexp-in-string
	 "\\(^.*\\)\\.org$"
	 "\\1.odt"
	 buffer-file-path))
       (current-buffer-name (buffer-name (current-buffer)))
       (output-buffer-name
	(format
	 "* %s | libreoffice PDF render *"
	 current-buffer-name))
       (output-buffer (get-buffer-create output-buffer-name)))
    (async-shell-command
     (format
      "cd %s && echo -n %s | entr -c %s --headless -env:UserInstallation=file:///tmp/LibreOffice_Conversion_${USER} --convert-to pdf:writer_pdf_Export %s"
      (file-name-directory buffer-file-path)
      odt-file-path
      libre-office
      odt-file-path)
     output-buffer-name)))
#+end_src
* Numeric priorities
#+begin_src elisp :results none
(setq org-priority-highest 1)
(setq org-priority-lowest 9)
(setq org-priority-default 1)
#+end_src
* Google calendar import
1. [[https://calendar.google.com/calendar/u/0/r/agenda?pli=1][open gcal in "schedule" view]]
2. select all and copy
3. paste the text into an emacs buffer
4. run the function ~ak/gcal-to-org~
5. put the resulting org markup in a file that is in your org-agenda
#+begin_src elisp :results none
(defun ak/gcal-to-org-string-month-to-number (month)
  (cond
   ((string-equal month "Jan") "01")
   ((string-equal month "Feb") "02")
   ((string-equal month "Mar") "03")
   ((string-equal month "Apr") "04")
   ((string-equal month "May") "05")
   ((string-equal month "Jun") "06")
   ((string-equal month "Jul") "07")
   ((string-equal month "Aug") "08")
   ((string-equal month "Sept") "09")
   ((string-equal month "Sep") "09")
   ((string-equal month "Oct") "10")
   ((string-equal month "Nov") "11")
   ((string-equal month "Dec") "12")))

(defun ak/gcal-to-org-clean-from-time (time)
  (if (< (length time) 3)
      (format "%s:00" time)
    time))

(defun ak/gcal-to-org-add-am-pm (from to)
  (if (string-match-p ".*a\\|pm" from)
      from
    (if (string-match "^.*\\(a\\|pm\\)$" to)
	(format "%s%s" from (match-string 1 to))
      from)))

(defun ak/gcal-to-org-format-time (time-string)
  (when (string-match "\\(.*\\) \\â€“ \\(.*\\)" time-string)
    (let* ((to-time (match-string 2 time-string))
	   (from-time
	    (ak/gcal-to-org-add-am-pm
	     (ak/gcal-to-org-clean-from-time (match-string 1 time-string))
	     to-time)))
      (format "%s-%s" from-time to-time))))

(defun ak/gcal-to-org-pad-day (day)
  (if (length= day 1)
      (format "0%s" day)
    day))
(defun ak/gcal-to-org ()
  (interactive)
  (goto-char 0)
  (let ((org-buffer (get-buffer-create "ak/gcal-to-org"))
	(current-day nil)
	(current-year "2024")
	(current-month nil)
	(current-time nil))
    (with-current-buffer org-buffer
      (org-mode)
      (erase-buffer))
    (while (< (line-number-at-pos) (count-lines (point-min) (point-max)))
      (let* ((current-line
	      (buffer-substring-no-properties
	       (line-beginning-position)
	       (line-end-position))))
	(if (string-match "^[0-9]\\{1,2\\}$" current-line)
	    (setq current-day
		  (ak/gcal-to-org-pad-day
		   (match-string 0 current-line)))
	  (if (string-match "^\\([A-Za-z]\\{3,4\\}\\),.\\{3,4\\}$" current-line)
	      (setq current-month (match-string 1 current-line))
	    (if (string-match "^\\(.*[a\\|p]m\\)$" current-line)
		(setq current-time (match-string 1 current-line))
	      (let ((event-name current-line))
		(when current-time
		  (with-current-buffer org-buffer
		    (insert (format
			     "** %s <%s-%s-%s %s>"
			     event-name
			     current-year
			     (ak/gcal-to-org-string-month-to-number current-month)
			     current-day
			     (ak/gcal-to-org-format-time current-time)))
		    (newline))
		  (setq current-time nil)))))))
      (forward-line))
    (display-buffer org-buffer)))
#+end_src
