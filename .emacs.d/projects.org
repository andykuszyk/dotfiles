* Project (as in code project) management
I use ~projectile~ for project management, because it has lots of nice features out-of-the-box, and it integrates well with many of the other packages I use.
** Install and configure projectile
#+begin_src elisp
(use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src
** Open dired when switching projects
By default ~projectile~ will open a file finder when switching projects, but I prefer to jump straight into the project's root directory:
#+begin_src elisp :results none
(setq projectile-switch-project-action #'projectile-dired)
#+end_src
** Create and open PRs using ~gh~ CLI and projectile
I often want to create or view PRs for the current Git branch I have open. These functions make doing so easy using the GitHub CLI:
#+begin_src elisp
(defun ak/gh-create-pr ()
  (interactive)
  (projectile-run-shell-command-in-root "gh pr create --web"))
(defun ak/gh-view-pr ()
  (interactive)
  (projectile-run-shell-command-in-root "gh pr view --web"))
(define-key projectile-mode-map (kbd "C-c p G c") #'ak/gh-create-pr)
(define-key projectile-mode-map (kbd "C-c p G v") #'ak/gh-view-pr)
#+end_src
** Generating links to files in git forges
This let's you copy the URL to the current line in the git forge (e.g. GitHub) using ~M-x git-link~.
#+begin_src elisp :results none
(use-package git-link :ensure t)
(define-key projectile-mode-map (kbd "C-c p G l") #'git-link)
#+end_src
